---
swagger: '2.0'
info:
  title: Go Simple API
  version: '1.0'

basePath: /api/v1
host: localhost:1360
schemes: [ "http" ]
consumes: [ "application/x-www-form-urlencoded" ]
produces: [ "application/json" ]

tags:
  - name: User
    description: Create, modify, and list users
  - name: Auth
    description: Generate and refresh authentication tokens

paths:
  "/users":
    get:
      description: Return all users from the database
      tags: [ "User" ]
      responses:
        "200":
          description: List of UserModel
          schema:
            type: array
            items: { $ref: "#/definitions/UserModel" }

  "/user/{id}":
    get:
      description: Return a single user from the database by their ID
      tags: [ "User" ]
      parameters:
        - name: id
          type: integer
          format: int32
          in: path
          required: true
      responses:
        "200":
          description: The User information
          schema: { $ref: "#/definitions/IdentifiedUser" }
        "404":
          description: The User was not found in the database
        "400":
          description: The query parameter "id" was incorrect
          schema: { $ref: "#/definitions/ErrorMessage" }

    patch:
      description: Update some user information
      tags: [ "User" ]
      parameters:
        - name: id
          type: integer
          in: path
          required: true
          format: int32
        - name: content
          in: body
          required: true
          schema:
            type: object
            properties:
              "username":
                type: string
      responses:
        "200":
          description: User updated successfully
          schema: { $ref: "#/definitions/IdentifiedUser" }

    delete:
      description: Removes an user from the database
      tags: [ "User" ]
      parameters:
        - name: id
          type: integer
          in: path
          required: true
          format: int32
        - name: content
          in: body
          required: true
          schema:
              type: object
              properties:
                "password":
                  type: string
                  format: password
      responses:
        "204":
          description: User was successfully removed

  "/user":
    post:
      description: Add a new User to the database
      tags: [ "User" ]
      parameters:
        - name: content
          in: body
          required: true
          schema: { $ref: "#/definitions/UserWithPassword" }
      responses:
        "201":
          description: The brand new User with their ID
          schema: { $ref: "#/definitions/IdentifiedUser" }
          headers:
            "Location":
              type: string
        "400":
          description: Incorrect request body
          schema: { $ref: "#/definitions/ErrorMessage" }

  "/user/{id}/password":
    patch:
      description: Change user password
      tags: [ "User" ]
      parameters:
        - name: id
          type: integer
          in: path
          required: true
          format: int32
        - name: content
          in: body
          required: true
          schema:
              type: object
              properties:
                "lastPassword":
                  type: string
                  format: password
                "newPassword":
                  type: string
                  format: password
              required:
                - "lastPassword"
                - "newPassword"
      responses:
        "204":
          description: Password was changed successfully
        "401":
          description: The last password was incorrect

definitions:
  "ErrorMessage":
    type: object
    properties:
      "error":
        type: string
  "UserId":
    type: integer
    format: int32
  "UserModel":
    type: object
    properties:
      "username":
        type: string
      "email":
        type: string
        format: email
    required:
      - "username"
      - "email"
  "IdentifiedUser":
      type: object
      allOf:
        - $ref: "#/definitions/UserModel"
        - $ref: "#/definitions/UserId"
  "UserWithPassword":
    type: object
    allOf:
        - $ref: "#/definitions/UserModel"
    properties:
      "password":
        type: string
        format: password
    required:
      - "password"